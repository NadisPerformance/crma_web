{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/belabed90/Documents/GitHub/crma_web/lib/withData.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo';\nimport checkLoggedIn from './checkLoggedIn';\nimport Router from 'next/router';\nimport { getCookie } from './session';\n\nfunction _getToken() {\n  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (context.req) return getCookie('token', context.req);\n  return getCookie('token', null);\n  return context.req && context.req.headers ? context.req.headers.cookie : document.cookie;\n}\n\nexport default function withData(ComposedComponent) {\n  var _class, _temp;\n\n  var privateArea = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    _inherits(WithData, _React$Component);\n\n    var _super = _createSuper(WithData);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n          var serverState, apollo, _yield$checkLoggedIn, loggedInUser, composedInitialProps, url, app;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  serverState = {}; // Setup a server-side one-time-use apollo client for initial props and\n                  // rendering (on server)\n\n                  apollo = initApollo({}, {\n                    getToken: function getToken() {\n                      return _getToken(context);\n                    }\n                  });\n\n                  if (!privateArea) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return checkLoggedIn(apollo);\n\n                case 5:\n                  _yield$checkLoggedIn = _context.sent;\n                  loggedInUser = _yield$checkLoggedIn.loggedInUser;\n\n                  if (false && !loggedInUser && context.res) {\n                    context.res.writeHead(302, {\n                      Location: '/users/login'\n                    });\n                    context.res.end();\n                  }\n\n                case 8:\n                  // Evaluate the composed component's getInitialProps()\n                  composedInitialProps = {};\n\n                  if (!ComposedComponent.getInitialProps) {\n                    _context.next = 13;\n                    break;\n                  }\n\n                  _context.next = 12;\n                  return ComposedComponent.getInitialProps(context, apollo);\n\n                case 12:\n                  composedInitialProps = _context.sent;\n\n                case 13:\n                  if (true) {\n                    _context.next = 27;\n                    break;\n                  }\n\n                  if (!(context.res && context.res.finished)) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 16:\n                  // Provide the `url` prop data in case a graphql query uses it\n                  url = {\n                    query: context.query,\n                    pathname: context.pathname\n                  };\n                  _context.prev = 17;\n                  // Run all GraphQL queries\n                  app = __jsx(ApolloProvider, {\n                    client: apollo,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 70,\n                      columnNumber: 7\n                    }\n                  }, __jsx(ComposedComponent, _extends({\n                    url: url\n                  }, composedInitialProps, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 71,\n                      columnNumber: 8\n                    }\n                  })));\n                  _context.next = 21;\n                  return getDataFromTree(app, {\n                    router: {\n                      query: context.query,\n                      pathname: context.pathname,\n                      asPath: context.asPath\n                    }\n                  });\n\n                case 21:\n                  _context.next = 25;\n                  break;\n\n                case 23:\n                  _context.prev = 23;\n                  _context.t0 = _context[\"catch\"](17);\n\n                case 25:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind(); // Extract query data from the Apollo's store\n\n                  serverState = apollo.cache.extract();\n\n                case 27:\n                  return _context.abrupt(\"return\", _objectSpread({\n                    serverState: serverState\n                  }, composedInitialProps));\n\n                case 28:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[17, 23]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _super.call(this, props); // Note: Apollo should never be used on the server side beyond the initial\n      // render within `getInitialProps()` above (since the entire prop tree\n      // will be initialized there), meaning the below will only ever be\n      // executed on the client.\n\n      _this.apollo = initApollo(_this.props.serverState, {\n        getToken: function getToken() {\n          return _getToken();\n        }\n      });\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"componentDidMount\",\n      value: function () {\n        var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var _yield$checkLoggedIn2, loggedInUser;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!privateArea) {\n                    _context2.next = 6;\n                    break;\n                  }\n\n                  _context2.next = 3;\n                  return checkLoggedIn(this.apollo);\n\n                case 3:\n                  _yield$checkLoggedIn2 = _context2.sent;\n                  loggedInUser = _yield$checkLoggedIn2.loggedInUser;\n                  if (false && !loggedInUser) Router.push('/users/login');\n\n                case 6:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function componentDidMount() {\n          return _componentDidMount.apply(this, arguments);\n        }\n\n        return componentDidMount;\n      }()\n    }, {\n      key: \"render\",\n      value: function render() {\n        return __jsx(ApolloProvider, {\n          client: this.apollo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 5\n          }\n        }, __jsx(ComposedComponent, _extends({}, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 6\n          }\n        })));\n      }\n    }]);\n\n    return WithData;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"WithData(\".concat(ComposedComponent.displayName, \")\")), _defineProperty(_class, \"propTypes\", {\n    serverState: PropTypes.object.isRequired\n  }), _temp;\n}","map":{"version":3,"sources":["/Users/belabed90/Documents/GitHub/crma_web/lib/withData.js"],"names":["React","PropTypes","ApolloProvider","getDataFromTree","Head","initApollo","checkLoggedIn","Router","getCookie","getToken","context","req","headers","cookie","document","withData","ComposedComponent","privateArea","serverState","apollo","loggedInUser","res","writeHead","Location","end","composedInitialProps","getInitialProps","finished","url","query","pathname","app","router","asPath","rewind","cache","extract","props","push","Component","displayName","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { ApolloProvider, getDataFromTree } from 'react-apollo'\r\nimport Head from 'next/head'\r\n\r\nimport initApollo from './initApollo'\r\nimport checkLoggedIn from './checkLoggedIn'\r\nimport Router from 'next/router'\r\nimport {getCookie} from './session'\r\nfunction getToken(context = {}) {\r\n\tif(context.req)\r\n\t\treturn getCookie('token',context.req)\r\n\treturn getCookie('token', null)\r\n\treturn context.req && context.req.headers\r\n\t\t? context.req.headers.cookie\r\n\t\t: document.cookie\r\n}\r\n\r\nexport default function withData(ComposedComponent, privateArea=false)  {\r\n\treturn class WithData extends React.Component {\r\n\t\tstatic displayName = `WithData(${ComposedComponent.displayName})`\r\n\t\tstatic propTypes = {\r\n\t\t\tserverState: PropTypes.object.isRequired\r\n\t\t}\r\n\r\n\t\tstatic async getInitialProps(context) {\r\n\t\t\tlet serverState = {}\r\n\r\n\t\t\t// Setup a server-side one-time-use apollo client for initial props and\r\n\t\t\t// rendering (on server)\r\n\t\t\tlet apollo = initApollo(\r\n\t\t\t\t{},\r\n\t\t\t\t{\r\n\t\t\t\t\tgetToken: () => getToken(context)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\tif(privateArea){\r\n\t\t\t\tlet { loggedInUser } = await checkLoggedIn(apollo)\r\n\r\n\t\t\t\tif ( false && !loggedInUser && context.res) {\r\n\t\t\t      context.res.writeHead(302, {\r\n\t\t\t        Location: '/users/login'\r\n\t\t\t      })\r\n\t\t\t      context.res.end()\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\t// Evaluate the composed component's getInitialProps()\r\n\t\t\tlet composedInitialProps = {}\r\n\t\t\tif (ComposedComponent.getInitialProps) {\r\n\t\t\t\tcomposedInitialProps = await ComposedComponent.getInitialProps(\r\n\t\t\t\t\tcontext,\r\n\t\t\t\t\tapollo\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\t// Run all graphql queries in the component tree\r\n\t\t\t// and extract the resulting data\r\n\t\t\tif (!process.browser) {\r\n\t\t\t\tif (context.res && context.res.finished) {\r\n\t\t\t\t\t// When redirecting, the response is finished.\r\n\t\t\t\t\t// No point in continuing to render\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Provide the `url` prop data in case a graphql query uses it\r\n\t\t\t\tconst url = { query: context.query, pathname: context.pathname }\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Run all GraphQL queries\r\n\t\t\t\t\tconst app = (\r\n\t\t\t\t\t\t<ApolloProvider client={apollo}>\r\n\t\t\t\t\t\t\t<ComposedComponent url={url} {...composedInitialProps} />\r\n\t\t\t\t\t\t</ApolloProvider>\r\n\t\t\t\t\t)\r\n\t\t\t\t\tawait getDataFromTree(app, {\r\n\t\t\t\t\t\trouter: {\r\n\t\t\t\t\t\t\tquery: context.query,\r\n\t\t\t\t\t\t\tpathname: context.pathname,\r\n\t\t\t\t\t\t\tasPath: context.asPath\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\r\n\t\t\t\t\t// Handle them in components via the data.error prop:\r\n\t\t\t\t\t// http://dev.apollodata.com/react/api-queries.html#graphql-query-data-error\r\n\t\t\t\t}\r\n\t\t\t\t// getDataFromTree does not call componentWillUnmount\r\n\t\t\t\t// head side effect therefore need to be cleared manually\r\n\t\t\t\tHead.rewind()\r\n\r\n\t\t\t\t// Extract query data from the Apollo's store\r\n\t\t\t\tserverState = apollo.cache.extract()\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tserverState,\r\n\t\t\t\t...composedInitialProps\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconstructor(props) {\r\n\t\t\tsuper(props)\r\n\t\t\t// Note: Apollo should never be used on the server side beyond the initial\r\n\t\t\t// render within `getInitialProps()` above (since the entire prop tree\r\n\t\t\t// will be initialized there), meaning the below will only ever be\r\n\t\t\t// executed on the client.\r\n\t\t\tthis.apollo = initApollo(this.props.serverState, {\r\n\t\t\t\tgetToken: () => getToken()\r\n\t\t\t})\r\n\r\n\t\t}\r\n\t\tasync componentDidMount(){\r\n\t\t\tif(privateArea){\r\n\t\t\t\t//alert(\"hello\")\r\n\t\t\t\tlet { loggedInUser } = await checkLoggedIn(this.apollo)\r\n\t\t\t\tif(false && !loggedInUser)\r\n\t\t\t\t\tRouter.push('/users/login')\r\n\t\t\t}\r\n\t\t}\r\n\t\trender() {\r\n\t\t\treturn (\r\n\t\t\t\t<ApolloProvider client={this.apollo}>\r\n\t\t\t\t\t<ComposedComponent {...this.props}  />\r\n\t\t\t\t</ApolloProvider>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}