{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo';\nimport checkLoggedIn from './checkLoggedIn';\nimport Router from 'next/router';\nimport { getCookie } from './session';\n\nfunction _getToken() {\n  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (context.req) return getCookie('token', context.req);\n  return getCookie('token', null);\n  return context.req && context.req.headers ? context.req.headers.cookie : document.cookie;\n}\n\nexport default function withData(ComposedComponent) {\n  var _class, _temp;\n\n  var privateArea = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    _inherits(WithData, _React$Component);\n\n    var _super = _createSuper(WithData);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n          var serverState, apollo, _yield$checkLoggedIn, loggedInUser, composedInitialProps, url, app;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  serverState = {}; // Setup a server-side one-time-use apollo client for initial props and\n                  // rendering (on server)\n\n                  apollo = initApollo({}, {\n                    getToken: function getToken() {\n                      return _getToken(context);\n                    }\n                  });\n\n                  if (!privateArea) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return checkLoggedIn(apollo);\n\n                case 5:\n                  _yield$checkLoggedIn = _context.sent;\n                  loggedInUser = _yield$checkLoggedIn.loggedInUser;\n\n                  if (false && !loggedInUser && context.res) {\n                    context.res.writeHead(302, {\n                      Location: '/users/login'\n                    });\n                    context.res.end();\n                  }\n\n                case 8:\n                  // Evaluate the composed component's getInitialProps()\n                  composedInitialProps = {};\n\n                  if (!ComposedComponent.getInitialProps) {\n                    _context.next = 13;\n                    break;\n                  }\n\n                  _context.next = 12;\n                  return ComposedComponent.getInitialProps(context, apollo);\n\n                case 12:\n                  composedInitialProps = _context.sent;\n\n                case 13:\n                  if (true) {\n                    _context.next = 27;\n                    break;\n                  }\n\n                  if (!(context.res && context.res.finished)) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 16:\n                  // Provide the `url` prop data in case a graphql query uses it\n                  url = {\n                    query: context.query,\n                    pathname: context.pathname\n                  };\n                  _context.prev = 17;\n                  // Run all GraphQL queries\n                  app = __jsx(ApolloProvider, {\n                    client: apollo\n                  }, __jsx(ComposedComponent, _extends({\n                    url: url\n                  }, composedInitialProps)));\n                  _context.next = 21;\n                  return getDataFromTree(app, {\n                    router: {\n                      query: context.query,\n                      pathname: context.pathname,\n                      asPath: context.asPath\n                    }\n                  });\n\n                case 21:\n                  _context.next = 25;\n                  break;\n\n                case 23:\n                  _context.prev = 23;\n                  _context.t0 = _context[\"catch\"](17);\n\n                case 25:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind(); // Extract query data from the Apollo's store\n\n                  serverState = apollo.cache.extract();\n\n                case 27:\n                  return _context.abrupt(\"return\", _objectSpread({\n                    serverState: serverState\n                  }, composedInitialProps));\n\n                case 28:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[17, 23]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _super.call(this, props); // Note: Apollo should never be used on the server side beyond the initial\n      // render within `getInitialProps()` above (since the entire prop tree\n      // will be initialized there), meaning the below will only ever be\n      // executed on the client.\n\n      _this.apollo = initApollo(_this.props.serverState, {\n        getToken: function getToken() {\n          return _getToken();\n        }\n      });\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"componentDidMount\",\n      value: function () {\n        var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var _yield$checkLoggedIn2, loggedInUser;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!privateArea) {\n                    _context2.next = 6;\n                    break;\n                  }\n\n                  _context2.next = 3;\n                  return checkLoggedIn(this.apollo);\n\n                case 3:\n                  _yield$checkLoggedIn2 = _context2.sent;\n                  loggedInUser = _yield$checkLoggedIn2.loggedInUser;\n                  if (false && !loggedInUser) Router.push('/users/login');\n\n                case 6:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function componentDidMount() {\n          return _componentDidMount.apply(this, arguments);\n        }\n\n        return componentDidMount;\n      }()\n    }, {\n      key: \"render\",\n      value: function render() {\n        return __jsx(ApolloProvider, {\n          client: this.apollo\n        }, __jsx(ComposedComponent, this.props));\n      }\n    }]);\n\n    return WithData;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"WithData(\".concat(ComposedComponent.displayName, \")\")), _temp;\n}","map":null,"metadata":{},"sourceType":"module"}