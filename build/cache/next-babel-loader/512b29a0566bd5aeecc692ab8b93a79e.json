{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!true) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, _ref) {\n  var getToken = _ref.getToken;\n  var httpLink = createUploadLink({\n    uri: 'https://crma-292718.uc.r.appspot.com/' //credentials: 'same-origin'\n\n  });\n  var authLink = setContext(function (_, _ref2) {\n    var headers = _ref2.headers;\n    var token = getToken();\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        Cookie: token ? token : null,\n        authorization: token ? \"\".concat(token) : \"\"\n      })\n    };\n  });\n  return new ApolloClient({\n    connectToDevTools: true,\n    ssrMode: !true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!true) {\n    return create(initialState, options);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":null,"metadata":{},"sourceType":"module"}