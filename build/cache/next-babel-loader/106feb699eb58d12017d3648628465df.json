{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Select from 'react-select';\nimport { get_brands } from './queries';\nimport { Query } from 'react-apollo';\n\nvar SelectInput = /*#__PURE__*/function (_React$Component) {\n  _inherits(SelectInput, _React$Component);\n\n  var _super = _createSuper(SelectInput);\n\n  function SelectInput(props) {\n    var _this;\n\n    _classCallCheck(this, SelectInput);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      selectedId: 0\n    };\n    _this.setSelectedId = _this.setSelectedId.bind(_assertThisInitialized(_this));\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SelectInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var selectedId = this.props.selectedId;\n\n      if (selectedId) {\n        this.state.selectedId = selectedId;\n        this.onChange(selectedId);\n      }\n    }\n  }, {\n    key: \"setSelectedId\",\n    value: function setSelectedId(value) {\n      this.setState({\n        selectedId: value * 1\n      });\n      this.onChange(value);\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(value) {\n      if (this.props.onChange) this.props.onChange(value * 1);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var selectedId = this.state.selectedId;\n      return __jsx(Query, {\n        query: get_brands,\n        pollInterval: 3000\n      }, function (_ref) {\n        var loading = _ref.loading,\n            error = _ref.error,\n            data = _ref.data;\n        if (loading) return __jsx(\"div\", null, \"Chargement en cours ...\");\n\n        if (error) {\n          console.log(error);\n          return __jsx(\"div\", null, \"Error\");\n        }\n\n        var options = []; //console.log(data.roles.edges)\n\n        var defaultValue;\n\n        for (var i = 0; i < data.brands.edges.length; i++) {\n          var brand = data.brands.edges[i].node;\n          options.push({\n            value: brand.id,\n            label: brand.name\n          });\n          if (brand.id == selectedId) defaultValue = {\n            value: brand.id,\n            label: brand.name\n          };\n        }\n\n        if (selectedId == 0 && data.brands.edges[0]) {\n          _this2.setSelectedId(data.brands.edges[0].node.id);\n        }\n\n        return __jsx(Select, {\n          className: \"basic-single\",\n          classNamePrefix: \"select\",\n          defaultValue: defaultValue,\n          isSearchable: true,\n          name: \"brand\",\n          options: options,\n          onChange: function onChange(_ref2) {\n            var value = _ref2.value;\n            return _this2.setSelectedId(value);\n          }\n        });\n      });\n    }\n  }]);\n\n  return SelectInput;\n}(React.Component);\n\nvar styles = {\n  btnXs: {\n    padding: \".25rem .4rem\",\n    fontSize: \".875rem\",\n    lineHeight: 0.5,\n    borderRadius: \".2rem\"\n  }\n};\nexport default SelectInput;","map":null,"metadata":{},"sourceType":"module"}