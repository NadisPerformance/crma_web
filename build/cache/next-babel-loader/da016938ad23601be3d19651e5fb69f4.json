{"ast":null,"code":"var _jsxFileName = \"/Users/belabed90/Documents/GitHub/crma_web/lib/withAuth.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Router from 'next/router';\nimport checkLoggedIn from './checkLoggedIn';\nexport default function withAuth(AuthComponent) {\n  return class Authenticated extends Component {\n    static async getInitialProps(ctx) {\n      // Check if Page has a `getInitialProps`; if so, call it.\n      const pageProps = AuthComponent.getInitialProps && (await AuthComponent.getInitialProps(ctx));\n      let {\n        loggedInUser\n      } = await checkLoggedIn(ctx.client);\n\n      if (!loggedInUser) {\n        Router.push('/users/login');\n      }\n\n      this.setState({\n        isLoading: false,\n        user: loggedInUser\n      }); // Return props.\n\n      return _objectSpread({}, pageProps);\n    }\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        isLoading: true,\n        loggedInUser: null\n      };\n    }\n\n    async componentDidMount() {\n      let {\n        loggedInUser\n      } = await checkLoggedIn(this.props.client);\n\n      if (!loggedInUser) {\n        Router.push('/users/login');\n      }\n\n      this.setState({\n        isLoading: false,\n        user: loggedInUser\n      });\n    }\n\n    render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, this.state.isLoading ? __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }\n      }, \"LOADING....\") : __jsx(AuthComponent, _extends({}, this.props, {\n        loggedInUser: this.state.loggedInUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      })));\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/belabed90/Documents/GitHub/crma_web/lib/withAuth.js"],"names":["React","Component","Router","checkLoggedIn","withAuth","AuthComponent","Authenticated","getInitialProps","ctx","pageProps","loggedInUser","client","push","setState","isLoading","user","constructor","props","state","componentDidMount","render"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,eAAe,SAASC,QAAT,CAAkBC,aAAlB,EAAiC;AAC9C,SAAO,MAAMC,aAAN,SAA4BL,SAA5B,CAAsC;AAC3C,iBAAaM,eAAb,CAA6BC,GAA7B,EAAkC;AAChC;AACA,YAAMC,SAAS,GACbJ,aAAa,CAACE,eAAd,KACC,MAAMF,aAAa,CAACE,eAAd,CAA8BC,GAA9B,CADP,CADF;AAGA,UAAI;AAAEE,QAAAA;AAAF,UAAmB,MAAMP,aAAa,CAACK,GAAG,CAACG,MAAL,CAA1C;;AACA,UAAI,CAACD,YAAL,EAAmB;AACjBR,QAAAA,MAAM,CAACU,IAAP,CAAY,cAAZ;AACD;;AACD,WAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE,KAAb;AAAoBC,QAAAA,IAAI,EAACL;AAAzB,OAAd,EATgC,CAUhC;;AACA,+BAAYD,SAAZ;AACD;;AACDO,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AACA,WAAKC,KAAL,GAAa;AACXJ,QAAAA,SAAS,EAAE,IADA;AAEXJ,QAAAA,YAAY,EAAC;AAFF,OAAb;AAID;;AACD,UAAMS,iBAAN,GAA0B;AACxB,UAAI;AAAET,QAAAA;AAAF,UAAmB,MAAMP,aAAa,CAAC,KAAKc,KAAL,CAAWN,MAAZ,CAA1C;;AACA,UAAI,CAACD,YAAL,EAAmB;AACjBR,QAAAA,MAAM,CAACU,IAAP,CAAY,cAAZ;AACD;;AACD,WAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE,KAAb;AAAoBC,QAAAA,IAAI,EAACL;AAAzB,OAAd;AACD;;AACDU,IAAAA,MAAM,GAAG;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKF,KAAL,CAAWJ,SAAX,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD,GAGC,MAAC,aAAD,eAAmB,KAAKG,KAAxB;AAA+B,QAAA,YAAY,EAAE,KAAKC,KAAL,CAAWR,YAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ,CADF;AASD;;AAtC0C,GAA7C;AAwCD","sourcesContent":["import React, { Component } from 'react'\r\nimport Router from 'next/router'\r\nimport checkLoggedIn from './checkLoggedIn'\r\nexport default function withAuth(AuthComponent) {\r\n  return class Authenticated extends Component {\r\n    static async getInitialProps(ctx) {\r\n      // Check if Page has a `getInitialProps`; if so, call it.\r\n      const pageProps =\r\n        AuthComponent.getInitialProps &&\r\n        (await AuthComponent.getInitialProps(ctx))\r\n      let { loggedInUser } = await checkLoggedIn(ctx.client)\r\n      if (!loggedInUser) {\r\n        Router.push('/users/login')\r\n      }\r\n      this.setState({ isLoading: false, user:loggedInUser })\r\n      // Return props.\r\n      return { ...pageProps }\r\n    }\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        isLoading: true, \r\n        loggedInUser:null\r\n      }\r\n    }\r\n    async componentDidMount() {\r\n      let { loggedInUser } = await checkLoggedIn(this.props.client)\r\n      if (!loggedInUser) {\r\n        Router.push('/users/login')\r\n      }\r\n      this.setState({ isLoading: false, user:loggedInUser })\r\n    }\r\n    render() {\r\n      return (\r\n        <div>\r\n          {this.state.isLoading ? (\r\n            <div>LOADING....</div>\r\n          ) : (\r\n            <AuthComponent {...this.props} loggedInUser={this.state.loggedInUser} />\r\n          )}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}