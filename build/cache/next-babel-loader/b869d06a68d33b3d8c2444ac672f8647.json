{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo';\nimport checkLoggedIn from './checkLoggedIn';\nimport Router from 'next/router';\nimport { getCookie } from './session';\n\nfunction getToken(context = {}) {\n  if (context.req) return getCookie('token', context.req);\n  return getCookie('token', null);\n  return context.req && context.req.headers ? context.req.headers.cookie : document.cookie;\n}\n\nexport default function withData(ComposedComponent, privateArea = false) {\n  var _class, _temp;\n\n  return _temp = _class = class WithData extends React.Component {\n    static async getInitialProps(context) {\n      let serverState = {}; // Setup a server-side one-time-use apollo client for initial props and\n      // rendering (on server)\n\n      let apollo = initApollo({}, {\n        getToken: () => getToken(context)\n      });\n\n      if (privateArea) {\n        let {\n          loggedInUser\n        } = await checkLoggedIn(apollo);\n\n        if (false && !loggedInUser && context.res) {\n          context.res.writeHead(302, {\n            Location: '/users/login'\n          });\n          context.res.end();\n        }\n      } // Evaluate the composed component's getInitialProps()\n\n\n      let composedInitialProps = {};\n\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(context, apollo);\n      } // Run all graphql queries in the component tree\n      // and extract the resulting data\n\n\n      if (!false) {\n        if (context.res && context.res.finished) {\n          // When redirecting, the response is finished.\n          // No point in continuing to render\n          return;\n        } // Provide the `url` prop data in case a graphql query uses it\n\n\n        const url = {\n          query: context.query,\n          pathname: context.pathname\n        };\n\n        try {\n          // Run all GraphQL queries\n          const app = __jsx(ApolloProvider, {\n            client: apollo\n          }, __jsx(ComposedComponent, _extends({\n            url: url\n          }, composedInitialProps)));\n\n          await getDataFromTree(app, {\n            router: {\n              query: context.query,\n              pathname: context.pathname,\n              asPath: context.asPath\n            }\n          });\n        } catch (error) {// Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // http://dev.apollodata.com/react/api-queries.html#graphql-query-data-error\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind(); // Extract query data from the Apollo's store\n\n        serverState = apollo.cache.extract();\n      }\n\n      return _objectSpread({\n        serverState\n      }, composedInitialProps);\n    }\n\n    constructor(props) {\n      super(props); // Note: Apollo should never be used on the server side beyond the initial\n      // render within `getInitialProps()` above (since the entire prop tree\n      // will be initialized there), meaning the below will only ever be\n      // executed on the client.\n\n      this.apollo = initApollo(this.props.serverState, {\n        getToken: () => getToken()\n      });\n    }\n\n    async componentDidMount() {\n      if (privateArea) {\n        //alert(\"hello\")\n        let {\n          loggedInUser\n        } = await checkLoggedIn(this.apollo);\n        if (false && !loggedInUser) Router.push('/users/login');\n      }\n    }\n\n    render() {\n      return __jsx(ApolloProvider, {\n        client: this.apollo\n      }, __jsx(ComposedComponent, this.props));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `WithData(${ComposedComponent.displayName})`), _temp;\n}","map":null,"metadata":{},"sourceType":"module"}