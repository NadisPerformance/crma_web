{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Router from 'next/router';\nimport checkLoggedIn from './checkLoggedIn';\nexport default function withAuth(AuthComponent) {\n  return class Authenticated extends Component {\n    static async getInitialProps(ctx) {\n      // Check if Page has a `getInitialProps`; if so, call it.\n      const pageProps = AuthComponent.getInitialProps && (await AuthComponent.getInitialProps(ctx));\n      let {\n        loggedInUser\n      } = await checkLoggedIn(ctx.client);\n\n      if (!loggedInUser) {\n        Router.push('/users/login');\n      }\n\n      this.setState({\n        isLoading: false,\n        user: loggedInUser\n      }); // Return props.\n\n      return _objectSpread({}, pageProps);\n    }\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        isLoading: true,\n        loggedInUser: null\n      };\n    }\n\n    async componentDidMount() {\n      let {\n        loggedInUser\n      } = await checkLoggedIn(this.props.client);\n\n      if (!loggedInUser) {\n        Router.push('/users/login');\n      }\n\n      this.setState({\n        isLoading: false,\n        user: loggedInUser\n      });\n    }\n\n    render() {\n      return __jsx(\"div\", null, this.state.isLoading ? __jsx(\"div\", null, \"LOADING....\") : __jsx(AuthComponent, _extends({}, this.props, {\n        loggedInUser: this.state.loggedInUser\n      })));\n    }\n\n  };\n}","map":null,"metadata":{},"sourceType":"module"}