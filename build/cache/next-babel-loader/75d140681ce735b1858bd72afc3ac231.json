{"ast":null,"code":"var _jsxFileName = \"/Users/belabed90/Documents/GitHub/crma_web/lib/withData.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo';\nimport checkLoggedIn from './checkLoggedIn';\nimport Router from 'next/router';\nimport { getCookie } from './session';\n\nfunction getToken(context = {}) {\n  if (context.req) return getCookie('token', context.req);\n  return getCookie('token', null);\n  return context.req && context.req.headers ? context.req.headers.cookie : document.cookie;\n}\n\nexport default function withData(ComposedComponent, privateArea = false) {\n  var _class, _temp;\n\n  return _temp = _class = class WithData extends React.Component {\n    static async getInitialProps(context) {\n      let serverState = {}; // Setup a server-side one-time-use apollo client for initial props and\n      // rendering (on server)\n\n      let apollo = initApollo({}, {\n        getToken: () => getToken(context)\n      });\n\n      if (privateArea) {\n        let {\n          loggedInUser\n        } = await checkLoggedIn(apollo);\n\n        if (false && !loggedInUser && context.res) {\n          context.res.writeHead(302, {\n            Location: '/users/login'\n          });\n          context.res.end();\n        }\n      } // Evaluate the composed component's getInitialProps()\n\n\n      let composedInitialProps = {};\n\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(context, apollo);\n      } // Run all graphql queries in the component tree\n      // and extract the resulting data\n\n\n      if (!false) {\n        if (context.res && context.res.finished) {\n          // When redirecting, the response is finished.\n          // No point in continuing to render\n          return;\n        } // Provide the `url` prop data in case a graphql query uses it\n\n\n        const url = {\n          query: context.query,\n          pathname: context.pathname\n        };\n\n        try {\n          // Run all GraphQL queries\n          const app = __jsx(ApolloProvider, {\n            client: apollo,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 7\n            }\n          }, __jsx(ComposedComponent, _extends({\n            url: url\n          }, composedInitialProps, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 8\n            }\n          })));\n\n          await getDataFromTree(app, {\n            router: {\n              query: context.query,\n              pathname: context.pathname,\n              asPath: context.asPath\n            }\n          });\n        } catch (error) {// Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // http://dev.apollodata.com/react/api-queries.html#graphql-query-data-error\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind(); // Extract query data from the Apollo's store\n\n        serverState = apollo.cache.extract();\n      }\n\n      return _objectSpread({\n        serverState\n      }, composedInitialProps);\n    }\n\n    constructor(props) {\n      super(props); // Note: Apollo should never be used on the server side beyond the initial\n      // render within `getInitialProps()` above (since the entire prop tree\n      // will be initialized there), meaning the below will only ever be\n      // executed on the client.\n\n      this.apollo = initApollo(this.props.serverState, {\n        getToken: () => getToken()\n      });\n    }\n\n    async componentDidMount() {\n      if (privateArea) {\n        //alert(\"hello\")\n        let {\n          loggedInUser\n        } = await checkLoggedIn(this.apollo);\n        if (false && !loggedInUser) Router.push('/users/login');\n      }\n    }\n\n    render() {\n      return __jsx(ApolloProvider, {\n        client: this.apollo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 5\n        }\n      }, __jsx(ComposedComponent, _extends({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 6\n        }\n      })));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `WithData(${ComposedComponent.displayName})`), _defineProperty(_class, \"propTypes\", {\n    serverState: PropTypes.object.isRequired\n  }), _temp;\n}","map":{"version":3,"sources":["/Users/belabed90/Documents/GitHub/crma_web/lib/withData.js"],"names":["React","PropTypes","ApolloProvider","getDataFromTree","Head","initApollo","checkLoggedIn","Router","getCookie","getToken","context","req","headers","cookie","document","withData","ComposedComponent","privateArea","WithData","Component","getInitialProps","serverState","apollo","loggedInUser","res","writeHead","Location","end","composedInitialProps","finished","url","query","pathname","app","router","asPath","error","rewind","cache","extract","constructor","props","componentDidMount","push","render","displayName","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { ApolloProvider, getDataFromTree } from 'react-apollo'\r\nimport Head from 'next/head'\r\n\r\nimport initApollo from './initApollo'\r\nimport checkLoggedIn from './checkLoggedIn'\r\nimport Router from 'next/router'\r\nimport {getCookie} from './session'\r\nfunction getToken(context = {}) {\r\n\tif(context.req)\r\n\t\treturn getCookie('token',context.req)\r\n\treturn getCookie('token', null)\r\n\treturn context.req && context.req.headers\r\n\t\t? context.req.headers.cookie\r\n\t\t: document.cookie\r\n}\r\n\r\nexport default function withData(ComposedComponent, privateArea=false)  {\r\n\treturn class WithData extends React.Component {\r\n\t\tstatic displayName = `WithData(${ComposedComponent.displayName})`\r\n\t\tstatic propTypes = {\r\n\t\t\tserverState: PropTypes.object.isRequired\r\n\t\t}\r\n\r\n\t\tstatic async getInitialProps(context) {\r\n\t\t\tlet serverState = {}\r\n\r\n\t\t\t// Setup a server-side one-time-use apollo client for initial props and\r\n\t\t\t// rendering (on server)\r\n\t\t\tlet apollo = initApollo(\r\n\t\t\t\t{},\r\n\t\t\t\t{\r\n\t\t\t\t\tgetToken: () => getToken(context)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\tif(privateArea){\r\n\t\t\t\tlet { loggedInUser } = await checkLoggedIn(apollo)\r\n\r\n\t\t\t\tif ( false && !loggedInUser && context.res) {\r\n\t\t\t      context.res.writeHead(302, {\r\n\t\t\t        Location: '/users/login'\r\n\t\t\t      })\r\n\t\t\t      context.res.end()\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\t// Evaluate the composed component's getInitialProps()\r\n\t\t\tlet composedInitialProps = {}\r\n\t\t\tif (ComposedComponent.getInitialProps) {\r\n\t\t\t\tcomposedInitialProps = await ComposedComponent.getInitialProps(\r\n\t\t\t\t\tcontext,\r\n\t\t\t\t\tapollo\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\t// Run all graphql queries in the component tree\r\n\t\t\t// and extract the resulting data\r\n\t\t\tif (!process.browser) {\r\n\t\t\t\tif (context.res && context.res.finished) {\r\n\t\t\t\t\t// When redirecting, the response is finished.\r\n\t\t\t\t\t// No point in continuing to render\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Provide the `url` prop data in case a graphql query uses it\r\n\t\t\t\tconst url = { query: context.query, pathname: context.pathname }\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Run all GraphQL queries\r\n\t\t\t\t\tconst app = (\r\n\t\t\t\t\t\t<ApolloProvider client={apollo}>\r\n\t\t\t\t\t\t\t<ComposedComponent url={url} {...composedInitialProps} />\r\n\t\t\t\t\t\t</ApolloProvider>\r\n\t\t\t\t\t)\r\n\t\t\t\t\tawait getDataFromTree(app, {\r\n\t\t\t\t\t\trouter: {\r\n\t\t\t\t\t\t\tquery: context.query,\r\n\t\t\t\t\t\t\tpathname: context.pathname,\r\n\t\t\t\t\t\t\tasPath: context.asPath\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\r\n\t\t\t\t\t// Handle them in components via the data.error prop:\r\n\t\t\t\t\t// http://dev.apollodata.com/react/api-queries.html#graphql-query-data-error\r\n\t\t\t\t}\r\n\t\t\t\t// getDataFromTree does not call componentWillUnmount\r\n\t\t\t\t// head side effect therefore need to be cleared manually\r\n\t\t\t\tHead.rewind()\r\n\r\n\t\t\t\t// Extract query data from the Apollo's store\r\n\t\t\t\tserverState = apollo.cache.extract()\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tserverState,\r\n\t\t\t\t...composedInitialProps\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconstructor(props) {\r\n\t\t\tsuper(props)\r\n\t\t\t// Note: Apollo should never be used on the server side beyond the initial\r\n\t\t\t// render within `getInitialProps()` above (since the entire prop tree\r\n\t\t\t// will be initialized there), meaning the below will only ever be\r\n\t\t\t// executed on the client.\r\n\t\t\tthis.apollo = initApollo(this.props.serverState, {\r\n\t\t\t\tgetToken: () => getToken()\r\n\t\t\t})\r\n\r\n\t\t}\r\n\t\tasync componentDidMount(){\r\n\t\t\tif(privateArea){\r\n\t\t\t\t//alert(\"hello\")\r\n\t\t\t\tlet { loggedInUser } = await checkLoggedIn(this.apollo)\r\n\t\t\t\tif(false && !loggedInUser)\r\n\t\t\t\t\tRouter.push('/users/login')\r\n\t\t\t}\r\n\t\t}\r\n\t\trender() {\r\n\t\t\treturn (\r\n\t\t\t\t<ApolloProvider client={this.apollo}>\r\n\t\t\t\t\t<ComposedComponent {...this.props}  />\r\n\t\t\t\t</ApolloProvider>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}