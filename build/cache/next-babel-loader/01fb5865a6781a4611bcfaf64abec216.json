{"ast":null,"code":"var _jsxFileName = \"/Users/belabed90/Documents/GitHub/crma_web/components/album/MultiUpload.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Query, Mutation, useMutation } from 'react-apollo';\nimport { create_album } from './queries';\nimport { create_image } from '../image/queries';\nexport default class MultiUpload extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"fileObj\", []);\n\n    _defineProperty(this, \"fileArray\", []);\n\n    this.state = {\n      file: [null],\n      albumId: null,\n      album: {\n        title: \"Test\"\n      },\n      image: {\n        albumId: null,\n        file: null\n      },\n      uploaded_images: []\n    };\n    this.uploadFile = this.uploadFile.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n  }\n\n  componentDidMount() {//const [createAlbum, { data }] = useMutation(createAlbum);\n    //createAlbum({ variables: { data:this.state.album } });\n  }\n\n  async uploadFile(file) {\n    this.setImageFile(file);\n    console.log(file);\n    if (!this.state.albumId) await this.createAlbum().then(result => {\n      this.setAlbumId(result.data.createAlbum.id);\n    });\n    this.uploadImage().then(result => {\n      this.state.uploaded_images.push(result.data.createImage);\n      this.setState({\n        uploaded_images: this.state.uploaded_images\n      }); //alert(\"Image uploaded \"+result.data.createImage.id)\n    });\n    this.fileObj.push(file);\n    this.fileArray.push(URL.createObjectURL(file)); //  console.log(this.fileObj)\n    //this.setState({ file: this.fileArray })\n  }\n\n  uploadFiles(e) {\n    e.preventDefault();\n    console.log(this.state.file);\n  }\n\n  setAlbumId(value) {\n    this.state.image.albumId = value * 1;\n    this.setState({\n      image: this.state.image\n    });\n    this.setState({\n      albumId: value * 1\n    });\n  }\n\n  async createAlbum() {}\n\n  setImageFile(file) {\n    this.state.image.file = file;\n    console.log(file);\n    this.setState({\n      image: this.state.image\n    });\n  }\n\n  render() {\n    const {\n      album,\n      albumId\n    } = this.state;\n    return __jsx(Mutation, {\n      mutation: create_album,\n      variables: {\n        data: this.state.album\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, postMutation => {\n      this.createAlbum = postMutation;\n      return __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 22\n        }\n      }, (this.state.uploaded_images || []).map(image => __jsx(\"div\", {\n        className: \"col-sm-12 row\",\n        style: {\n          backgroundColor: 'white',\n          padding: '2px',\n          margin: '2px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: \"col-sm-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }\n      }, __jsx(\"img\", {\n        src: image.image_url,\n        alt: \"...\",\n        width: \"100px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }\n      })), __jsx(\"div\", {\n        className: \"col-sm-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }), __jsx(\"div\", {\n        className: \"col-sm-4\",\n        style: {\n          padding: '30px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }, __jsx(\"a\", {\n        onClick: () => alert(\"hello\"),\n        className: \"btn btn-danger btn-sm\",\n        style: {\n          verticalAlign: 'middle'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 23\n        }\n      }, __jsx(\"i\", {\n        className: \"fa fa-trash\",\n        style: {\n          color: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }\n      }))))), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, __jsx(\"input\", {\n        type: \"file\",\n        className: \"form-control\",\n        id: \"file\",\n        onChange: ({\n          target: {\n            validity,\n            files: [file]\n          }\n        }) => this.uploadFile(file),\n        _multiple: true,\n        style: {\n          display: 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      })), __jsx(Mutation, {\n        mutation: create_image,\n        variables: {\n          data: this.state.image\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, postMutation => {\n        this.uploadImage = postMutation;\n        return __jsx(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger btn-block\",\n          onClick: () => document.getElementById('file').click(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 23\n          }\n        }, \"Charger des photos\");\n      }));\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/belabed90/Documents/GitHub/crma_web/components/album/MultiUpload.js"],"names":["React","Component","Query","Mutation","useMutation","create_album","create_image","MultiUpload","constructor","props","state","file","albumId","album","title","image","uploaded_images","uploadFile","bind","uploadFiles","componentDidMount","setImageFile","console","log","createAlbum","then","result","setAlbumId","data","id","uploadImage","push","createImage","setState","fileObj","fileArray","URL","createObjectURL","e","preventDefault","value","render","postMutation","map","backgroundColor","padding","margin","image_url","alert","verticalAlign","color","target","validity","files","display","document","getElementById","click"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Query, Mutation , useMutation} from 'react-apollo'\nimport {create_album} from './queries'\nimport {create_image} from '../image/queries'\nexport default class MultiUpload extends Component {\n\n    fileObj = [];\n    fileArray = [];\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            file: [null],\n            albumId:null,\n            album:{\n              title:\"Test\"\n            },\n            image:{\n              albumId:null,\n              file: null\n            },\n            uploaded_images:[]\n        }\n        this.uploadFile = this.uploadFile.bind(this)\n        this.uploadFiles = this.uploadFiles.bind(this)\n    }\n    componentDidMount(){\n      //const [createAlbum, { data }] = useMutation(createAlbum);\n      //createAlbum({ variables: { data:this.state.album } });\n    }\n    async uploadFile(file) {\n        this.setImageFile(file)\n        console.log(file)\n        if(  !this.state.albumId )\n          await this.createAlbum().then((result)=>{\n            this.setAlbumId(result.data.createAlbum.id)\n          })\n        this.uploadImage().then((result)=>{\n          this.state.uploaded_images.push(result.data.createImage)\n          this.setState({uploaded_images:this.state.uploaded_images})\n          //alert(\"Image uploaded \"+result.data.createImage.id)\n        })\n        this.fileObj.push(file)\n        this.fileArray.push(URL.createObjectURL(file))\n      //  console.log(this.fileObj)\n        //this.setState({ file: this.fileArray })\n    }\n\n    uploadFiles(e) {\n        e.preventDefault()\n        console.log(this.state.file)\n    }\n    setAlbumId(value){\n      this.state.image.albumId =  value * 1\n      this.setState({image:this.state.image})\n      this.setState({albumId:value *1})\n    }\n    async createAlbum(){\n\n    }\n    setImageFile(file){\n       this.state.image.file = file\n       console.log(file)\n       this.setState({image:this.state.image})\n    }\n\n    render() {\n        const {album, albumId} = this.state\n        return (\n          <Mutation mutation={create_album} variables={{data:this.state.album}} >\n            {postMutation => {\n             this.createAlbum = postMutation\n             return (<React.Fragment>\n               {(this.state.uploaded_images || []).map(image => (\n                <div className=\"col-sm-12 row\" style={{backgroundColor:'white',padding:'2px',margin:'2px'}}>\n                    <div className=\"col-sm-4\" >\n                        <img src={image.image_url} alt=\"...\" width=\"100px\" />\n                    </div>\n                    <div className=\"col-sm-4\" >\n                    </div>\n                    <div className=\"col-sm-4\" style={{padding: '30px'}} >\n                      <a onClick={()=>alert(\"hello\")} className=\"btn btn-danger btn-sm\"  style={{verticalAlign: 'middle'}}>\n                        <i className=\"fa fa-trash\" style={{color:'white'}}></i>\n                      </a>\n                    </div>\n                </div>\n               ))}\n                <div className=\"form-group\">\n                    <input type=\"file\" className=\"form-control\" id=\"file\" onChange={({target: {validity,files: [file],},})=>this.uploadFile(file)} _multiple  style={{display:'none'}}/>\n                </div>\n                <Mutation mutation={create_image} variables={{data:this.state.image}} >\n                  {postMutation =>{\n                    this.uploadImage = postMutation\n                    return (\n                      <button type=\"button\" className=\"btn btn-danger btn-block\" onClick={()=>document.getElementById('file').click()}>Charger des photos</button>\n                    )\n                  } }\n                </Mutation>\n            </React.Fragment >\n          )}\n          }\n        </Mutation>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}