{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!true) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, _ref) {\n  var getToken = _ref.getToken;\n  var httpLink = createUploadLink({\n    uri: 'http://localhost:4008/' //credentials: 'same-origin'\n\n  });\n  var authLink = setContext(function (_, _ref2) {\n    var headers = _ref2.headers;\n    var token = getToken();\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        Cookie: token ? token : null,\n        authorization: token ? \"\".concat(token) : \"\"\n      })\n    };\n  });\n  return new ApolloClient({\n    connectToDevTools: true,\n    ssrMode: !true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!true) {\n    return create(initialState, options);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Users/belabed90/Documents/GitHub/crma_web/lib/initApollo.js"],"names":["ApolloClient","createHttpLink","createUploadLink","InMemoryCache","setContext","fetch","apolloClient","global","create","initialState","getToken","httpLink","uri","authLink","_","headers","token","Cookie","authorization","connectToDevTools","ssrMode","link","concat","cache","restore","initApollo","options"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,gBAAT,QAAgC,sBAAhC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,IAAIC,YAAY,GAAG,IAAnB,C,CAEA;;AACA,IAAI,KAAJ,EAAsB;AACrBC,EAAAA,MAAM,CAACF,KAAP,GAAeA,KAAf;AACA;;AAED,SAASG,MAAT,CAAgBC,YAAhB,QAA4C;AAAA,MAAZC,QAAY,QAAZA,QAAY;AAC3C,MAAMC,QAAQ,GAAGT,gBAAgB,CAAC;AACjCU,IAAAA,GAAG,EAAE,wBAD4B,CAEjC;;AAFiC,GAAD,CAAjC;AAKA,MAAMC,QAAQ,GAAGT,UAAU,CAAC,UAACU,CAAD,SAAoB;AAAA,QAAdC,OAAc,SAAdA,OAAc;AAC/C,QAAMC,KAAK,GAAGN,QAAQ,EAAtB;AACA,WAAO;AACNK,MAAAA,OAAO,kCACHA,OADG;AAENE,QAAAA,MAAM,EAAED,KAAK,GAAGA,KAAH,GAAW,IAFlB;AAGNE,QAAAA,aAAa,EAAEF,KAAK,aAAMA,KAAN,IAAgB;AAH9B;AADD,KAAP;AAOA,GAT0B,CAA3B;AAWA,SAAO,IAAIhB,YAAJ,CAAiB;AACvBmB,IAAAA,iBAAiB,MADM;AAEvBC,IAAAA,OAAO,EAAE,KAFc;AAEI;AAC3BC,IAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CAHiB;AAIvBY,IAAAA,KAAK,EAAE,IAAIpB,aAAJ,GAAoBqB,OAApB,CAA4Bf,YAAY,IAAI,EAA5C;AAJgB,GAAjB,CAAP;AAMA;;AAED,eAAe,SAASgB,UAAT,CAAoBhB,YAApB,EAAkCiB,OAAlC,EAA2C;AACzD;AACA;AACA,MAAI,KAAJ,EAAsB;AACrB,WAAOlB,MAAM,CAACC,YAAD,EAAeiB,OAAf,CAAb;AACA,GALwD,CAOzD;;;AACA,MAAI,CAACpB,YAAL,EAAmB;AAClBA,IAAAA,YAAY,GAAGE,MAAM,CAACC,YAAD,EAAeiB,OAAf,CAArB;AACA;;AAED,SAAOpB,YAAP;AACA","sourcesContent":["import { ApolloClient } from 'apollo-client'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { createUploadLink} from 'apollo-upload-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { setContext } from 'apollo-link-context'\r\nimport fetch from 'isomorphic-unfetch'\r\nlet apolloClient = null\r\n\r\n// Polyfill fetch() on the server (used by apollo-client)\r\nif (!process.browser) {\r\n\tglobal.fetch = fetch\r\n}\r\n\r\nfunction create(initialState, { getToken }) {\r\n\tconst httpLink = createUploadLink({\r\n\t\turi: 'http://localhost:4008/',\r\n\t\t//credentials: 'same-origin'\r\n\t})\r\n\r\n\tconst authLink = setContext((_, { headers }) => {\r\n\t\tconst token = getToken()\r\n\t\treturn {\r\n\t\t\theaders: {\r\n\t\t\t\t...headers,\r\n\t\t\t\tCookie: token ? token : null,\r\n\t\t\t\tauthorization: token ? `${token}` : \"\",\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\treturn new ApolloClient({\r\n\t\tconnectToDevTools: process.browser,\r\n\t\tssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\r\n\t\tlink: authLink.concat(httpLink),\r\n\t\tcache: new InMemoryCache().restore(initialState || {})\r\n\t})\r\n}\r\n\r\nexport default function initApollo(initialState, options) {\r\n\t// Make sure to create a new client for every server-side request so that data\r\n\t// isn't shared between connections (which would be bad)\r\n\tif (!process.browser) {\r\n\t\treturn create(initialState, options)\r\n\t}\r\n\r\n\t// Reuse client on the client-side\r\n\tif (!apolloClient) {\r\n\t\tapolloClient = create(initialState, options)\r\n\t}\r\n\r\n\treturn apolloClient\r\n}\r\n"]},"metadata":{},"sourceType":"module"}